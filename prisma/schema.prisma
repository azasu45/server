generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id           String        @id @default(uuid())
  email        String?       @unique
  password     String?
  image        String?
  roles        String        @default("user|admin")
  status       String        @default("active")
  accounts     Account[]
  PersonalData PersonalData?
  sessions     Session[]
}

model PersonalData {
  id            String    @id @default(uuid())
  identity      String    @unique
  firstname     String?
  secondname    String?
  lastname      String?
  address       String?
  localNumber   Int?
  phone         Int?
  whatsapp      Int?
  telegram      Int?
  emailVerified DateTime?
  userId        String    @unique
  User          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id    String @id @default(uuid())
  name  String @unique @db.VarChar(50)
  items Item[]
}

model Item {
  id            String         @id @default(uuid())
  upadteAt      DateTime?      @updatedAt @db.Timestamptz(6)
  createAt      DateTime       @default(now()) @db.Timestamptz(6)
  status        Boolean?       @default(true)
  lastUpdateBy  String?        @db.VarChar(100)
  name          String         @unique @db.VarChar(50)
  image         String?        @db.VarChar(200)
  categoryId    String
  inventoryItem InventoryItem?
  category      Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  Prices        ItemDetail[]
}

model ItemDetail {
  id            String           @id @default(uuid())
  itemId        String
  subName       String?
  createAt      DateTime         @default(now()) @db.Timestamptz(6)
  updateAt      DateTime?        @updatedAt @db.Timestamptz(6)
  status        Boolean          @default(true)
  autoUpdate    Boolean?         @default(false)
  description   String?          @default("") @db.VarChar(255)
  price         Float            @default(0) @db.Real
  quantity      Float            @default(0) @db.Real
  unit          MeasurementUnits
  inventoryItem Item             @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

model Inventory {
  id             String         @id @default(uuid())
  name           String         @unique
  status         Boolean        @default(true)
  createAt       DateTime       @default(now())
  inventoryItems InventoryItem?
}

model InventoryItem {
  id          String      @id @default(uuid())
  itemId      String?     @unique
  inventoryId String?     @unique
  Quantity    Float       @db.Real
  inventory   Inventory?  @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  item        Item?       @relation(fields: [itemId], references: [id], onDelete: Cascade)
  OrderItem   OrderItem[]
}

model OrderItem {
  orderId         String
  inventoryItemId String
  quantity        Float         @db.Real
  price           Float         @db.Real
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
  order           Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([orderId, inventoryItemId], name: "id")
}

model Order {
  id        String      @id @default(uuid())
  createAt  DateTime    @default(now()) @db.Timestamptz(3)
  updateAt  DateTime?   @updatedAt @db.Timestamptz(3)
  number    Int
  OrderItem OrderItem[]
}

model CurrencyPrice {
  id       String   @id @default(uuid())
  createAt DateTime @default(now())
  symbol   String   @default("")
  value    Float    @default(0)
  name     String
}

model AccountingEntries {
  id          String     @id @default(uuid())
  createAt    DateTime   @default(now())
  number      Int        @default(0)
  debit       Float
  credit      Float
  acountsId   String?
  descripcion String
  Acounts     AccountsC? @relation(fields: [acountsId], references: [id])
}

model AccountsC {
  id                String              @id @default(uuid())
  number            Int                 @default(0)
  descripcion       String
  accountingEntries AccountingEntries[]
}

enum MeasurementUnits {
  KG
  LT
  UNIT
}
