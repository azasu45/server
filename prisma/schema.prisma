generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text //Postgre
  access_token      String? //@db.Text //Postgre
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text //Postgre
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id           String        @id @default(uuid())
  email        String?       @unique
  password     String?
  image        String?
  roles        String        @default("user|admin") //Enum
  status       String        @default("active")
  accounts     Account[]
  sessions     Session[]
  PersonalData PersonalData?
}

model PersonalData {
  id            String    @id @default(uuid())
  identity      String    @unique
  firstname     String?
  secondname    String?
  lastname      String?
  address       String?
  localNumber   Int?
  phone         Int?
  whatsapp      Int?
  telegram      Int?
  emailVerified DateTime?
  userId        String    @unique
  User          User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  items Item[]
}

model Item {
  id            String         @id @default(uuid())
  name          String         @unique
  status        Boolean?       @default(true)
  createAt      DateTime       @default(now())
  lastUpdateAt  DateTime       @updatedAt
  lastUpdateBy  String?
  idCategory    String
  category      Category       @relation(fields: [idCategory], references: [id], onDelete: Cascade)
  inventoryItem InventoryItem?
}

model Inventory {
  id             String          @id @default(uuid())
  name           String          @unique
  status         Boolean         @default(true)
  createAt       DateTime        @default(now())
  inventoryItems InventoryItem[]
}

model InventoryItem {
  id            String        @id @default(uuid())
  inventoryId   String?
  itemId        String?       @unique
  item          Item?         @relation(fields: [itemId], references: [id], onDelete: SetNull)
  inventory     Inventory?    @relation(fields: [inventoryId], references: [id], onDelete: SetNull)
  pricesDetails PriceDetail[]
}

model PriceDetail {
  id              String         @id @default(uuid())
  createAt        DateTime       @default(now())
  quantity        Float          @default(0)
  price           Float          @default(0)
  status          Boolean        @default(true)
  autoUpdate      Boolean        @default(false)
  description     String         @default("")
  inventoryItemId String?
  InventoryItem   InventoryItem? @relation(fields: [inventoryItemId], references: [id])
}

model CurrencyPrice {
  id       String   @id @default(uuid())
  createAt DateTime @default(now())
  value    Float    @default(0)
  name     String
}

model AccountingEntries {
  id          String     @id @default(uuid())
  number      Int        @default(0)
  descripcion String
  debit       Float
  credit      Float
  createAt    DateTime   @default(now())
  acountsId   String?
  Acounts     AccountsC? @relation(fields: [acountsId], references: [id])
}

model AccountsC {
  id                String              @id @default(uuid())
  number            Int                 @default(0)
  descripcion       String
  accountingEntries AccountingEntries[]
}
